{"version":3,"sources":["../webpack:/micri/node_modules/bytes/index.js","../webpack:/micri/node_modules/content-type/index.js","../webpack:/micri/node_modules/depd/index.js","../webpack:/micri/node_modules/depd/lib/compat/callsite-tostring.js","../webpack:/micri/node_modules/depd/lib/compat/event-listener-count.js","../webpack:/micri/node_modules/depd/lib/compat/index.js","../webpack:/micri/node_modules/http-errors/index.js","../webpack:/micri/node_modules/iconv-lite/encodings/dbcs-codec.js","../webpack:/micri/node_modules/iconv-lite/encodings/dbcs-data.js","../webpack:/micri/node_modules/iconv-lite/encodings/index.js","../webpack:/micri/node_modules/iconv-lite/encodings/internal.js","../webpack:/micri/node_modules/iconv-lite/encodings/sbcs-codec.js","../webpack:/micri/node_modules/iconv-lite/encodings/sbcs-data-generated.js","../webpack:/micri/node_modules/iconv-lite/encodings/sbcs-data.js","../webpack:/micri/node_modules/iconv-lite/encodings/utf16.js","../webpack:/micri/node_modules/iconv-lite/encodings/utf7.js","../webpack:/micri/node_modules/iconv-lite/lib/bom-handling.js","../webpack:/micri/node_modules/iconv-lite/lib/extend-node.js","../webpack:/micri/node_modules/iconv-lite/lib/index.js","../webpack:/micri/node_modules/iconv-lite/lib/streams.js","../webpack:/micri/node_modules/inherits/inherits.js","../webpack:/micri/node_modules/inherits/inherits_browser.js","../webpack:/micri/node_modules/raw-body/index.js","../webpack:/micri/node_modules/raw-body/node_modules/bytes/index.js","../webpack:/micri/node_modules/safer-buffer/safer.js","../webpack:/micri/node_modules/setprototypeof/index.js","../webpack:/micri/node_modules/statuses/index.js","../webpack:/micri/node_modules/toidentifier/index.js","../webpack:/micri/node_modules/unpipe/index.js","../webpack:/micri/src/body.ts","../webpack:/micri/src/errors.ts","../webpack:/micri/src/index.ts","../webpack:/micri/src/router.ts","../webpack:/micri/src/serve.ts","../webpack:/micri/src/types.ts","../webpack:/micri/src/with-worker.ts","../webpack:/micri/external node-commonjs \"buffer\"","../webpack:/micri/external node-commonjs \"events\"","../webpack:/micri/external node-commonjs \"http\"","../webpack:/micri/external node-commonjs \"path\"","../webpack:/micri/external node-commonjs \"stream\"","../webpack:/micri/external node-commonjs \"string_decoder\"","../webpack:/micri/external node-commonjs \"util\"","../webpack:/micri/external node-commonjs \"worker_threads\"","../webpack:/micri/webpack/bootstrap","../webpack:/micri/webpack/runtime/compat","../webpack:/micri/webpack/startup"],"names":["module","exports","bytes","format","parse","formatThousandsRegExp","formatDecimalsRegExp","map","b","kb","mb","gb","tb","Math","pow","pb","parseRegExp","value","options","Number","isFinite","mag","abs","thousandsSeparator","unitSeparator","decimalPlaces","undefined","fixedDecimals","Boolean","unit","toLowerCase","val","str","toFixed","replace","split","s","i","join","isNaN","results","exec","floatValue","parseInt","parseFloat","floor","PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","QESC_REGEXP","QUOTE_REGEXP","TYPE_REGEXP","obj","TypeError","parameters","type","test","string","param","params","Object","keys","sort","length","qstring","header","getcontenttype","index","indexOf","substr","trim","ContentType","key","match","lastIndex","getHeader","headers","String","this","create","callSiteToString","__webpack_require__","eventListenerCount","relative","depd","basePath","process","cwd","containsNamespace","namespace","vals","ns","convertDataDescriptorToAccessor","prop","message","descriptor","getOwnPropertyDescriptor","get","getter","writable","set","setter","defineProperty","createArgumentsString","arity","createStackString","stack","name","getStack","site","callSiteLocation","file","deprecate","log","call","_file","_ignored","isignored","_namespace","_traced","istraced","_warned","function","wrapfunction","property","wrapproperty","noDeprecation","env","NO_DEPRECATION","traceDeprecation","TRACE_DEPRECATION","haslisteners","caller","callFile","callSite","depSite","seen","msg","defaultMessage","err","DeprecationError","slice","emit","stderr","isTTY","formatColor","formatPlain","output","write","getFileName","line","getLineNumber","colm","getColumnNumber","isEval","getEvalOrigin","getFunctionName","funcName","formatLocation","context","getThis","typeName","getTypeName","getMethodName","timestamp","Date","toUTCString","formatted","limit","Error","stackTraceLimit","prep","prepareStackTrace","prepareObjectStackTrace","max","captureStackTrace","fn","args","deprecatedfn","eval","configurable","apply","arguments","error","stackString","enumerable","callSiteFileLocation","fileName","fileLocation","isNative","getScriptNameOrSourceURL","lineNumber","columnNumber","addSuffix","functionName","isConstructor","isMethodCall","isToplevel","methodName","getConstructorName","lastIndexOf","receiver","constructor","emitter","listeners","EventEmitter","lazyProperty","toString","listenerCount","setPrototypeOf","statuses","inherits","toIdentifier","createError","HttpError","createHttpErrorConstructor","isHttpError","createIsHttpErrorFunction","populateConstructorExports","codes","codeClass","status","charAt","props","arg","statusCode","expose","createClientErrorConstructor","code","className","toClassName","ClientError","prototype","nameFunc","createServerErrorConstructor","ServerError","func","desc","forEach","forEachCode","CodeError","ImATeapot","Buffer","_dbcs","DBCSCodec","UNASSIGNED","GB18030_CODE","SEQ_START","NODE_START","UNASSIGNED_NODE","Array","DEF_CHAR","codecOptions","iconv","encodingName","table","mappingTable","decodeTables","decodeTableSeq","_addDecodeChunk","defaultCharUnicode","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","j","from","to","_fillEncodeTable","encodeAdd","uChar","hasOwnProperty","_setEncodeChar","charCodeAt","defCharSB","defaultCharSingleByte","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","encoder","DBCSEncoder","decoder","DBCSDecoder","_getDecodeTrieNode","addr","push","node","chunk","curAddr","writeTable","k","part","l","codeTrail","len","seq","m","charCode","_getEncodeBucket","uCode","high","dbcsCode","bucket","low","_setEncodeSequence","oldVal","nodeIdx","prefix","mbCode","codec","leadSurrogate","seqObj","newBuf","alloc","nextChar","resCode","subtable","idx","findIdx","uChars","gbChars","end","prevBuf","buf","prevBufOffset","seqStart","concat","curByte","curSeq","ptr","uCodeLead","ret","r","mid","shiftjis","csshiftjis","mskanji","sjis","windows31j","ms31j","xsjis","windows932","ms932","cp932","eucjp","gb2312","gb231280","gb23121980","csgb2312","csiso58gb231280","euccn","windows936","ms936","cp936","gbk","xgbk","isoir58","chinese","windows949","ms949","cp949","cseuckr","csksc56011987","euckr","isoir149","korean","ksc56011987","ksc56011989","ksc5601","windows950","ms950","cp950","big5","big5hkscs","cnbig5","csbig5","xxbig5","modules","enc","utf8","bomAware","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","InternalCodec","InternalEncoderBase64","InternalEncoderCesu8","InternalDecoderCesu8","InternalEncoder","InternalDecoder","StringDecoder","prevStr","completeQuads","bufIdx","acc","contBytes","accBytes","res","fromCharCode","_sbcs","SBCSCodec","chars","asciiString","decodeBuf","encodeBuf","SBCSEncoder","SBCSDecoder","idx1","idx2","windows874","win874","cp874","windows1250","win1250","cp1250","windows1251","win1251","cp1251","windows1252","win1252","cp1252","windows1253","win1253","cp1253","windows1254","win1254","cp1254","windows1255","win1255","cp1255","windows1256","win1256","cp1256","windows1257","win1257","cp1257","windows1258","win1258","cp1258","iso88591","cp28591","iso88592","cp28592","iso88593","cp28593","iso88594","cp28594","iso88595","cp28595","iso88596","cp28596","iso88597","cp28597","iso88598","cp28598","iso88599","cp28599","iso885910","cp28600","iso885911","cp28601","iso885913","cp28603","iso885914","cp28604","iso885915","cp28605","iso885916","cp28606","cp437","ibm437","csibm437","cp737","ibm737","csibm737","cp775","ibm775","csibm775","cp850","ibm850","csibm850","cp852","ibm852","csibm852","cp855","ibm855","csibm855","cp856","ibm856","csibm856","cp857","ibm857","csibm857","cp858","ibm858","csibm858","cp860","ibm860","csibm860","cp861","ibm861","csibm861","cp862","ibm862","csibm862","cp863","ibm863","csibm863","cp864","ibm864","csibm864","cp865","ibm865","csibm865","cp866","ibm866","csibm866","cp869","ibm869","csibm869","cp922","ibm922","csibm922","cp1046","ibm1046","csibm1046","cp1124","ibm1124","csibm1124","cp1125","ibm1125","csibm1125","cp1129","ibm1129","csibm1129","cp1133","ibm1133","csibm1133","cp1161","ibm1161","csibm1161","cp1162","ibm1162","csibm1162","cp1163","ibm1163","csibm1163","maccroatian","maccyrillic","macgreek","maciceland","macroman","macromania","macthai","macturkish","macukraine","koi8r","koi8u","koi8ru","koi8t","armscii8","rk1048","tcvn","georgianacademy","georgianps","pt154","viscii","iso646cn","iso646jp","hproman8","macintosh","ascii","tis620","maccenteuro","ibm808","cp808","mik","ascii8bit","usascii","ansix34","ansix341968","ansix341986","csascii","cp367","ibm367","isoir6","iso646us","iso646irv","us","latin1","latin2","latin3","latin4","latin5","latin6","latin7","latin8","latin9","latin10","csisolatin1","csisolatin2","csisolatin3","csisolatin4","csisolatincyrillic","csisolatinarabic","csisolatingreek","csisolatinhebrew","csisolatin5","csisolatin6","l1","l2","l3","l4","l5","l6","l7","l8","l9","l10","isoir14","isoir57","isoir100","isoir101","isoir109","isoir110","isoir144","isoir127","isoir126","isoir138","isoir148","isoir157","isoir166","isoir179","isoir199","isoir203","isoir226","cp819","ibm819","cyrillic","arabic","arabic8","ecma114","asmo708","greek","greek8","ecma118","elot928","hebrew","hebrew8","turkish","turkish8","thai","thai8","celtic","celtic8","isoceltic","tis6200","tis62025291","tis62025330","cspc8codepage437","cspc775baltic","cspc850multilingual","cspcp852","cspc862latinhebrew","cpgr","msee","mscyrl","msansi","msgreek","msturk","mshebr","msarab","winbaltrim","cp20866","ibm878","cskoi8r","cp21866","ibm1168","strk10482002","tcvn5712","tcvn57121","gb198880","cn","csiso14jisc6220ro","jisc62201969ro","jp","cshproman8","r8","roman8","xroman8","ibm1051","mac","csmacintosh","utf16be","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","tmp","overflowByte","buf2","utf16","Utf16Codec","Utf16Encoder","Utf16Decoder","addBOM","getEncoder","initialBytes","initialBytesLen","encoding","detectEncoding","defaultEncoding","getDecoder","trail","asciiCharsLE","asciiCharsBE","_len","min","utf7","Utf7Codec","unicode11utf7","Utf7Encoder","Utf7Decoder","nonDirectChars","encode","bind","inBase64","base64Accum","base64Regex","base64Chars","plusChar","minusChar","andChar","lastI","decode","b64str","canBeDecoded","utf7imap","Utf7IMAPCodec","Utf7IMAPEncoder","Utf7IMAPDecoder","base64AccumIdx","base64IMAPChars","BOMChar","PrependBOM","PrependBOMWrapper","StripBOM","StripBOMWrapper","pass","stripBOM","original","supportsNodeEncodingsExtension","Uint8Array","extendNodeEncodings","console","nodeNativeEncodings","isNativeEncoding","SlowBuffer","SlowBufferToString","start","SlowBufferWrite","offset","swap","remaining","RangeError","copy","BufferIsEncoding","isEncoding","encodingExists","BufferByteLength","byteLength","BufferToString","BufferWrite","_offset","_length","_encoding","supportsStreams","Readable","ReadableSetEncoding","setEncoding","_readableState","collect","_collect","undoExtendNodeEncodings","bomHandling","encodings","skipDecodeWarning","getCodec","e","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecDef","nodeVer","versions","nodeVerArr","Transform","encodeStream","IconvLiteEncoderStream","decodeStream","IconvLiteDecoderStream","conv","decodeStrings","_transform","done","_flush","cb","chunks","on","isBuffer","util","ctor","superCtor","super_","TempCtor","unpipe","getRawBody","ICONV_ENCODING_MESSAGE_REGEXP","stream","callback","opts","global","Promise","readStream","executor","resolve","reject","onRead","halt","pause","complete","sync","expected","state","_decoder","received","buffer","onAborted","cleanup","onData","onEnd","nextTick","invokeCallback","removeListener","safer","Safer","encodingOrOffset","size","fill","kStringMaxLength","binding","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH","__proto__","setProtoOf","mixinProperties","proto","STATUS_CODES","populateStatusesMap","redirect","empty","retry","arr","n","token","toUpperCase","hasPipeDataListeners","listener","__importDefault","mod","__esModule","default","json","text","content_type_1","raw_body_1","errors_1","rawBodyMap","WeakMap","async","req","body","MicriBodyError","charset","parseJSON","JSON","MicriError","then","bytes_1","originalError","super","__createBinding","o","k2","__setModuleDefault","v","__importStar","result","__exportStar","p","withWorker","Router","serve_1","with_worker_1","serve","everyPredicate","otherwise","router","http_1","rest","find","route","onInit","METHODS","method","pred","reduce","curr","t","every","f","run","sendError","send","NODE_ENV","DEV","jsonStringify","stringify","isStream","data","pipe","setHeader","typeObj","isAcceptJson","accept","ct","errorObj","acceptJson","warn","catch","createServer","Server","ServerResponse","IncomingMessage","path_1","body_1","worker_threads_1","handlerPath","workerOpts","isMainThread","trampoline","__dirname","_a","worker","Worker","SHARE_ENV","workerData","url","writeFn","writeHead","statusMessage","postMessage","require","__webpack_module_cache__","moduleId","cachedModule","threw","__webpack_modules__","ab","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\n        : s\n    }).join('.');\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  if (isNaN(floatValue)) {\n    return null;\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n","/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n","/*!\n * depd\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar callSiteToString = require('./lib/compat').callSiteToString\nvar eventListenerCount = require('./lib/compat').eventListenerCount\nvar relative = require('path').relative\n\n/**\n * Module exports.\n */\n\nmodule.exports = depd\n\n/**\n * Get the path to base files on.\n */\n\nvar basePath = process.cwd()\n\n/**\n * Determine if namespace is contained in the string.\n */\n\nfunction containsNamespace (str, namespace) {\n  var vals = str.split(/[ ,]+/)\n  var ns = String(namespace).toLowerCase()\n\n  for (var i = 0; i < vals.length; i++) {\n    var val = vals[i]\n\n    // namespace contained\n    if (val && (val === '*' || val.toLowerCase() === ns)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Convert a data descriptor to accessor descriptor.\n */\n\nfunction convertDataDescriptorToAccessor (obj, prop, message) {\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\n  var value = descriptor.value\n\n  descriptor.get = function getter () { return value }\n\n  if (descriptor.writable) {\n    descriptor.set = function setter (val) { return (value = val) }\n  }\n\n  delete descriptor.value\n  delete descriptor.writable\n\n  Object.defineProperty(obj, prop, descriptor)\n\n  return descriptor\n}\n\n/**\n * Create arguments string to keep arity.\n */\n\nfunction createArgumentsString (arity) {\n  var str = ''\n\n  for (var i = 0; i < arity; i++) {\n    str += ', arg' + i\n  }\n\n  return str.substr(2)\n}\n\n/**\n * Create stack string from stack.\n */\n\nfunction createStackString (stack) {\n  var str = this.name + ': ' + this.namespace\n\n  if (this.message) {\n    str += ' deprecated ' + this.message\n  }\n\n  for (var i = 0; i < stack.length; i++) {\n    str += '\\n    at ' + callSiteToString(stack[i])\n  }\n\n  return str\n}\n\n/**\n * Create deprecate for namespace in caller.\n */\n\nfunction depd (namespace) {\n  if (!namespace) {\n    throw new TypeError('argument namespace is required')\n  }\n\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n  var file = site[0]\n\n  function deprecate (message) {\n    // call to self as log\n    log.call(deprecate, message)\n  }\n\n  deprecate._file = file\n  deprecate._ignored = isignored(namespace)\n  deprecate._namespace = namespace\n  deprecate._traced = istraced(namespace)\n  deprecate._warned = Object.create(null)\n\n  deprecate.function = wrapfunction\n  deprecate.property = wrapproperty\n\n  return deprecate\n}\n\n/**\n * Determine if namespace is ignored.\n */\n\nfunction isignored (namespace) {\n  /* istanbul ignore next: tested in a child processs */\n  if (process.noDeprecation) {\n    // --no-deprecation support\n    return true\n  }\n\n  var str = process.env.NO_DEPRECATION || ''\n\n  // namespace ignored\n  return containsNamespace(str, namespace)\n}\n\n/**\n * Determine if namespace is traced.\n */\n\nfunction istraced (namespace) {\n  /* istanbul ignore next: tested in a child processs */\n  if (process.traceDeprecation) {\n    // --trace-deprecation support\n    return true\n  }\n\n  var str = process.env.TRACE_DEPRECATION || ''\n\n  // namespace traced\n  return containsNamespace(str, namespace)\n}\n\n/**\n * Display deprecation message.\n */\n\nfunction log (message, site) {\n  var haslisteners = eventListenerCount(process, 'deprecation') !== 0\n\n  // abort early if no destination\n  if (!haslisteners && this._ignored) {\n    return\n  }\n\n  var caller\n  var callFile\n  var callSite\n  var depSite\n  var i = 0\n  var seen = false\n  var stack = getStack()\n  var file = this._file\n\n  if (site) {\n    // provided site\n    depSite = site\n    callSite = callSiteLocation(stack[1])\n    callSite.name = depSite.name\n    file = callSite[0]\n  } else {\n    // get call site\n    i = 2\n    depSite = callSiteLocation(stack[i])\n    callSite = depSite\n  }\n\n  // get caller of deprecated thing in relation to file\n  for (; i < stack.length; i++) {\n    caller = callSiteLocation(stack[i])\n    callFile = caller[0]\n\n    if (callFile === file) {\n      seen = true\n    } else if (callFile === this._file) {\n      file = this._file\n    } else if (seen) {\n      break\n    }\n  }\n\n  var key = caller\n    ? depSite.join(':') + '__' + caller.join(':')\n    : undefined\n\n  if (key !== undefined && key in this._warned) {\n    // already warned\n    return\n  }\n\n  this._warned[key] = true\n\n  // generate automatic message from call site\n  var msg = message\n  if (!msg) {\n    msg = callSite === depSite || !callSite.name\n      ? defaultMessage(depSite)\n      : defaultMessage(callSite)\n  }\n\n  // emit deprecation if listeners exist\n  if (haslisteners) {\n    var err = DeprecationError(this._namespace, msg, stack.slice(i))\n    process.emit('deprecation', err)\n    return\n  }\n\n  // format and write message\n  var format = process.stderr.isTTY\n    ? formatColor\n    : formatPlain\n  var output = format.call(this, msg, caller, stack.slice(i))\n  process.stderr.write(output + '\\n', 'utf8')\n}\n\n/**\n * Get call site location as array.\n */\n\nfunction callSiteLocation (callSite) {\n  var file = callSite.getFileName() || '<anonymous>'\n  var line = callSite.getLineNumber()\n  var colm = callSite.getColumnNumber()\n\n  if (callSite.isEval()) {\n    file = callSite.getEvalOrigin() + ', ' + file\n  }\n\n  var site = [file, line, colm]\n\n  site.callSite = callSite\n  site.name = callSite.getFunctionName()\n\n  return site\n}\n\n/**\n * Generate a default message from the site.\n */\n\nfunction defaultMessage (site) {\n  var callSite = site.callSite\n  var funcName = site.name\n\n  // make useful anonymous name\n  if (!funcName) {\n    funcName = '<anonymous@' + formatLocation(site) + '>'\n  }\n\n  var context = callSite.getThis()\n  var typeName = context && callSite.getTypeName()\n\n  // ignore useless type name\n  if (typeName === 'Object') {\n    typeName = undefined\n  }\n\n  // make useful type name\n  if (typeName === 'Function') {\n    typeName = context.name || typeName\n  }\n\n  return typeName && callSite.getMethodName()\n    ? typeName + '.' + funcName\n    : funcName\n}\n\n/**\n * Format deprecation message without color.\n */\n\nfunction formatPlain (msg, caller, stack) {\n  var timestamp = new Date().toUTCString()\n\n  var formatted = timestamp +\n    ' ' + this._namespace +\n    ' deprecated ' + msg\n\n  // add stack trace\n  if (this._traced) {\n    for (var i = 0; i < stack.length; i++) {\n      formatted += '\\n    at ' + callSiteToString(stack[i])\n    }\n\n    return formatted\n  }\n\n  if (caller) {\n    formatted += ' at ' + formatLocation(caller)\n  }\n\n  return formatted\n}\n\n/**\n * Format deprecation message with color.\n */\n\nfunction formatColor (msg, caller, stack) {\n  var formatted = '\\x1b[36;1m' + this._namespace + '\\x1b[22;39m' + // bold cyan\n    ' \\x1b[33;1mdeprecated\\x1b[22;39m' + // bold yellow\n    ' \\x1b[0m' + msg + '\\x1b[39m' // reset\n\n  // add stack trace\n  if (this._traced) {\n    for (var i = 0; i < stack.length; i++) {\n      formatted += '\\n    \\x1b[36mat ' + callSiteToString(stack[i]) + '\\x1b[39m' // cyan\n    }\n\n    return formatted\n  }\n\n  if (caller) {\n    formatted += ' \\x1b[36m' + formatLocation(caller) + '\\x1b[39m' // cyan\n  }\n\n  return formatted\n}\n\n/**\n * Format call site location.\n */\n\nfunction formatLocation (callSite) {\n  return relative(basePath, callSite[0]) +\n    ':' + callSite[1] +\n    ':' + callSite[2]\n}\n\n/**\n * Get the stack as array of call sites.\n */\n\nfunction getStack () {\n  var limit = Error.stackTraceLimit\n  var obj = {}\n  var prep = Error.prepareStackTrace\n\n  Error.prepareStackTrace = prepareObjectStackTrace\n  Error.stackTraceLimit = Math.max(10, limit)\n\n  // capture the stack\n  Error.captureStackTrace(obj)\n\n  // slice this function off the top\n  var stack = obj.stack.slice(1)\n\n  Error.prepareStackTrace = prep\n  Error.stackTraceLimit = limit\n\n  return stack\n}\n\n/**\n * Capture call site stack from v8.\n */\n\nfunction prepareObjectStackTrace (obj, stack) {\n  return stack\n}\n\n/**\n * Return a wrapped function in a deprecation message.\n */\n\nfunction wrapfunction (fn, message) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('argument fn must be a function')\n  }\n\n  var args = createArgumentsString(fn.length)\n  var deprecate = this // eslint-disable-line no-unused-vars\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n\n  site.name = fn.name\n\n   // eslint-disable-next-line no-eval\n  var deprecatedfn = eval('(function (' + args + ') {\\n' +\n    '\"use strict\"\\n' +\n    'log.call(deprecate, message, site)\\n' +\n    'return fn.apply(this, arguments)\\n' +\n    '})')\n\n  return deprecatedfn\n}\n\n/**\n * Wrap property in a deprecation message.\n */\n\nfunction wrapproperty (obj, prop, message) {\n  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    throw new TypeError('argument obj must be object')\n  }\n\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\n\n  if (!descriptor) {\n    throw new TypeError('must call property on owner object')\n  }\n\n  if (!descriptor.configurable) {\n    throw new TypeError('property must be configurable')\n  }\n\n  var deprecate = this\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n\n  // set site name\n  site.name = prop\n\n  // convert data descriptor\n  if ('value' in descriptor) {\n    descriptor = convertDataDescriptorToAccessor(obj, prop, message)\n  }\n\n  var get = descriptor.get\n  var set = descriptor.set\n\n  // wrap getter\n  if (typeof get === 'function') {\n    descriptor.get = function getter () {\n      log.call(deprecate, message, site)\n      return get.apply(this, arguments)\n    }\n  }\n\n  // wrap setter\n  if (typeof set === 'function') {\n    descriptor.set = function setter () {\n      log.call(deprecate, message, site)\n      return set.apply(this, arguments)\n    }\n  }\n\n  Object.defineProperty(obj, prop, descriptor)\n}\n\n/**\n * Create DeprecationError for deprecation\n */\n\nfunction DeprecationError (namespace, message, stack) {\n  var error = new Error()\n  var stackString\n\n  Object.defineProperty(error, 'constructor', {\n    value: DeprecationError\n  })\n\n  Object.defineProperty(error, 'message', {\n    configurable: true,\n    enumerable: false,\n    value: message,\n    writable: true\n  })\n\n  Object.defineProperty(error, 'name', {\n    enumerable: false,\n    configurable: true,\n    value: 'DeprecationError',\n    writable: true\n  })\n\n  Object.defineProperty(error, 'namespace', {\n    configurable: true,\n    enumerable: false,\n    value: namespace,\n    writable: true\n  })\n\n  Object.defineProperty(error, 'stack', {\n    configurable: true,\n    enumerable: false,\n    get: function () {\n      if (stackString !== undefined) {\n        return stackString\n      }\n\n      // prepare stack trace\n      return (stackString = createStackString.call(this, stack))\n    },\n    set: function setter (val) {\n      stackString = val\n    }\n  })\n\n  return error\n}\n","/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = callSiteToString\n\n/**\n * Format a CallSite file location to a string.\n */\n\nfunction callSiteFileLocation (callSite) {\n  var fileName\n  var fileLocation = ''\n\n  if (callSite.isNative()) {\n    fileLocation = 'native'\n  } else if (callSite.isEval()) {\n    fileName = callSite.getScriptNameOrSourceURL()\n    if (!fileName) {\n      fileLocation = callSite.getEvalOrigin()\n    }\n  } else {\n    fileName = callSite.getFileName()\n  }\n\n  if (fileName) {\n    fileLocation += fileName\n\n    var lineNumber = callSite.getLineNumber()\n    if (lineNumber != null) {\n      fileLocation += ':' + lineNumber\n\n      var columnNumber = callSite.getColumnNumber()\n      if (columnNumber) {\n        fileLocation += ':' + columnNumber\n      }\n    }\n  }\n\n  return fileLocation || 'unknown source'\n}\n\n/**\n * Format a CallSite to a string.\n */\n\nfunction callSiteToString (callSite) {\n  var addSuffix = true\n  var fileLocation = callSiteFileLocation(callSite)\n  var functionName = callSite.getFunctionName()\n  var isConstructor = callSite.isConstructor()\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\n  var line = ''\n\n  if (isMethodCall) {\n    var methodName = callSite.getMethodName()\n    var typeName = getConstructorName(callSite)\n\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) !== 0) {\n        line += typeName + '.'\n      }\n\n      line += functionName\n\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\n        line += ' [as ' + methodName + ']'\n      }\n    } else {\n      line += typeName + '.' + (methodName || '<anonymous>')\n    }\n  } else if (isConstructor) {\n    line += 'new ' + (functionName || '<anonymous>')\n  } else if (functionName) {\n    line += functionName\n  } else {\n    addSuffix = false\n    line += fileLocation\n  }\n\n  if (addSuffix) {\n    line += ' (' + fileLocation + ')'\n  }\n\n  return line\n}\n\n/**\n * Get constructor name of reviver.\n */\n\nfunction getConstructorName (obj) {\n  var receiver = obj.receiver\n  return (receiver.constructor && receiver.constructor.name) || null\n}\n","/*!\n * depd\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = eventListenerCount\n\n/**\n * Get the count of listeners on an event emitter of a specific type.\n */\n\nfunction eventListenerCount (emitter, type) {\n  return emitter.listeners(type).length\n}\n","/*!\n * depd\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar EventEmitter = require('events').EventEmitter\n\n/**\n * Module exports.\n * @public\n */\n\nlazyProperty(module.exports, 'callSiteToString', function callSiteToString () {\n  var limit = Error.stackTraceLimit\n  var obj = {}\n  var prep = Error.prepareStackTrace\n\n  function prepareObjectStackTrace (obj, stack) {\n    return stack\n  }\n\n  Error.prepareStackTrace = prepareObjectStackTrace\n  Error.stackTraceLimit = 2\n\n  // capture the stack\n  Error.captureStackTrace(obj)\n\n  // slice the stack\n  var stack = obj.stack.slice()\n\n  Error.prepareStackTrace = prep\n  Error.stackTraceLimit = limit\n\n  return stack[0].toString ? toString : require('./callsite-tostring')\n})\n\nlazyProperty(module.exports, 'eventListenerCount', function eventListenerCount () {\n  return EventEmitter.listenerCount || require('./event-listener-count')\n})\n\n/**\n * Define a lazy property.\n */\n\nfunction lazyProperty (obj, prop, getter) {\n  function get () {\n    var val = getter()\n\n    Object.defineProperty(obj, prop, {\n      configurable: true,\n      enumerable: true,\n      value: val\n    })\n\n    return val\n  }\n\n  Object.defineProperty(obj, prop, {\n    configurable: true,\n    enumerable: true,\n    get: get\n  })\n}\n\n/**\n * Call toString() on the obj\n */\n\nfunction toString (obj) {\n  return obj.toString()\n}\n","/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('http-errors')\nvar setPrototypeOf = require('setprototypeof')\nvar statuses = require('statuses')\nvar inherits = require('inherits')\nvar toIdentifier = require('toidentifier')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createError\nmodule.exports.HttpError = createHttpErrorConstructor()\nmodule.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError)\n\n// Populate exports for all constructors\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError)\n\n/**\n * Get the code class of a status code.\n * @private\n */\n\nfunction codeClass (status) {\n  return Number(String(status).charAt(0) + '00')\n}\n\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */\n\nfunction createError () {\n  // so much arity going on ~_~\n  var err\n  var msg\n  var status = 500\n  var props = {}\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n    if (arg instanceof Error) {\n      err = arg\n      status = err.status || err.statusCode || status\n      continue\n    }\n    switch (typeof arg) {\n      case 'string':\n        msg = arg\n        break\n      case 'number':\n        status = arg\n        if (i !== 0) {\n          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)')\n        }\n        break\n      case 'object':\n        props = arg\n        break\n    }\n  }\n\n  if (typeof status === 'number' && (status < 400 || status >= 600)) {\n    deprecate('non-error status code; use only 4xx or 5xx status codes')\n  }\n\n  if (typeof status !== 'number' ||\n    (!statuses[status] && (status < 400 || status >= 600))) {\n    status = 500\n  }\n\n  // constructor\n  var HttpError = createError[status] || createError[codeClass(status)]\n\n  if (!err) {\n    // create error\n    err = HttpError\n      ? new HttpError(msg)\n      : new Error(msg || statuses[status])\n    Error.captureStackTrace(err, createError)\n  }\n\n  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n    // add properties to generic error\n    err.expose = status < 500\n    err.status = err.statusCode = status\n  }\n\n  for (var key in props) {\n    if (key !== 'status' && key !== 'statusCode') {\n      err[key] = props[key]\n    }\n  }\n\n  return err\n}\n\n/**\n * Create HTTP error abstract base class.\n * @private\n */\n\nfunction createHttpErrorConstructor () {\n  function HttpError () {\n    throw new TypeError('cannot construct abstract class')\n  }\n\n  inherits(HttpError, Error)\n\n  return HttpError\n}\n\n/**\n * Create a constructor for a client error.\n * @private\n */\n\nfunction createClientErrorConstructor (HttpError, name, code) {\n  var className = toClassName(name)\n\n  function ClientError (message) {\n    // create the error object\n    var msg = message != null ? message : statuses[code]\n    var err = new Error(msg)\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ClientError)\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ClientError.prototype)\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    })\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    })\n\n    return err\n  }\n\n  inherits(ClientError, HttpError)\n  nameFunc(ClientError, className)\n\n  ClientError.prototype.status = code\n  ClientError.prototype.statusCode = code\n  ClientError.prototype.expose = true\n\n  return ClientError\n}\n\n/**\n * Create function to test is a value is a HttpError.\n * @private\n */\n\nfunction createIsHttpErrorFunction (HttpError) {\n  return function isHttpError (val) {\n    if (!val || typeof val !== 'object') {\n      return false\n    }\n\n    if (val instanceof HttpError) {\n      return true\n    }\n\n    return val instanceof Error &&\n      typeof val.expose === 'boolean' &&\n      typeof val.statusCode === 'number' && val.status === val.statusCode\n  }\n}\n\n/**\n * Create a constructor for a server error.\n * @private\n */\n\nfunction createServerErrorConstructor (HttpError, name, code) {\n  var className = toClassName(name)\n\n  function ServerError (message) {\n    // create the error object\n    var msg = message != null ? message : statuses[code]\n    var err = new Error(msg)\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ServerError)\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ServerError.prototype)\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    })\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    })\n\n    return err\n  }\n\n  inherits(ServerError, HttpError)\n  nameFunc(ServerError, className)\n\n  ServerError.prototype.status = code\n  ServerError.prototype.statusCode = code\n  ServerError.prototype.expose = false\n\n  return ServerError\n}\n\n/**\n * Set the name of a function, if possible.\n * @private\n */\n\nfunction nameFunc (func, name) {\n  var desc = Object.getOwnPropertyDescriptor(func, 'name')\n\n  if (desc && desc.configurable) {\n    desc.value = name\n    Object.defineProperty(func, 'name', desc)\n  }\n}\n\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */\n\nfunction populateConstructorExports (exports, codes, HttpError) {\n  codes.forEach(function forEachCode (code) {\n    var CodeError\n    var name = toIdentifier(statuses[code])\n\n    switch (codeClass(code)) {\n      case 400:\n        CodeError = createClientErrorConstructor(HttpError, name, code)\n        break\n      case 500:\n        CodeError = createServerErrorConstructor(HttpError, name, code)\n        break\n    }\n\n    if (CodeError) {\n      // export the constructor\n      exports[code] = CodeError\n      exports[name] = CodeError\n    }\n  })\n\n  // backwards-compatibility\n  exports[\"I'mateapot\"] = deprecate.function(exports.ImATeapot,\n    '\"I\\'mateapot\"; use \"ImATeapot\" instead')\n}\n\n/**\n * Get a class name from a name identifier.\n * @private\n */\n\nfunction toClassName (name) {\n  return name.substr(-5) !== 'Error'\n    ? name + 'Error'\n    : name\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = Buffer.alloc(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = Buffer.alloc(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = Buffer.alloc(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = Buffer.alloc(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n","\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it. \nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}","\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    \"mik\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n// Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer\n\n// == Extend Node primitives to use iconv-lite =================================\n\nmodule.exports = function (iconv) {\n    var original = undefined; // Place to keep original methods.\n\n    // Node authors rewrote Buffer internals to make it compatible with\n    // Uint8Array and we cannot patch key functions since then.\n    // Note: this does use older Buffer API on a purpose\n    iconv.supportsNodeEncodingsExtension = !(Buffer.from || new Buffer(0) instanceof Uint8Array);\n\n    iconv.extendNodeEncodings = function extendNodeEncodings() {\n        if (original) return;\n        original = {};\n\n        if (!iconv.supportsNodeEncodingsExtension) {\n            console.error(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n            console.error(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n            return;\n        }\n\n        var nodeNativeEncodings = {\n            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, \n            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,\n        };\n\n        Buffer.isNativeEncoding = function(enc) {\n            return enc && nodeNativeEncodings[enc.toLowerCase()];\n        }\n\n        // -- SlowBuffer -----------------------------------------------------------\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        original.SlowBufferToString = SlowBuffer.prototype.toString;\n        SlowBuffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.SlowBufferWrite = SlowBuffer.prototype.write;\n        SlowBuffer.prototype.write = function(string, offset, length, encoding) {\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n        }\n\n        // -- Buffer ---------------------------------------------------------------\n\n        original.BufferIsEncoding = Buffer.isEncoding;\n        Buffer.isEncoding = function(encoding) {\n            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n        }\n\n        original.BufferByteLength = Buffer.byteLength;\n        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferByteLength.call(this, str, encoding);\n\n            // Slow, I know, but we don't have a better way yet.\n            return iconv.encode(str, encoding).length;\n        }\n\n        original.BufferToString = Buffer.prototype.toString;\n        Buffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.BufferWrite = Buffer.prototype.write;\n        Buffer.prototype.write = function(string, offset, length, encoding) {\n            var _offset = offset, _length = length, _encoding = encoding;\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n\n            // TODO: Set _charsWritten.\n        }\n\n\n        // -- Readable -------------------------------------------------------------\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            original.ReadableSetEncoding = Readable.prototype.setEncoding;\n            Readable.prototype.setEncoding = function setEncoding(enc, options) {\n                // Use our own decoder, it has the same interface.\n                // We cannot use original function as it doesn't handle BOM-s.\n                this._readableState.decoder = iconv.getDecoder(enc, options);\n                this._readableState.encoding = enc;\n            }\n\n            Readable.prototype.collect = iconv._collect;\n        }\n    }\n\n    // Remove iconv-lite Node primitive extensions.\n    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n        if (!iconv.supportsNodeEncodingsExtension)\n            return;\n        if (!original)\n            throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\")\n\n        delete Buffer.isNativeEncoding;\n\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        SlowBuffer.prototype.toString = original.SlowBufferToString;\n        SlowBuffer.prototype.write = original.SlowBufferWrite;\n\n        Buffer.isEncoding = original.BufferIsEncoding;\n        Buffer.byteLength = original.BufferByteLength;\n        Buffer.prototype.toString = original.BufferToString;\n        Buffer.prototype.write = original.BufferWrite;\n\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            Readable.prototype.setEncoding = original.ReadableSetEncoding;\n            delete Readable.prototype.collect;\n        }\n\n        original = undefined;\n    }\n}\n","\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n","\"use strict\";\n\nvar Buffer = require(\"buffer\").Buffer,\n    Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","/*!\n * raw-body\n * Copyright(c) 2013-2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar bytes = require('bytes')\nvar createError = require('http-errors')\nvar iconv = require('iconv-lite')\nvar unpipe = require('unpipe')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getRawBody\n\n/**\n * Module variables.\n * @private\n */\n\nvar ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /\n\n/**\n * Get the decoder for a given encoding.\n *\n * @param {string} encoding\n * @private\n */\n\nfunction getDecoder (encoding) {\n  if (!encoding) return null\n\n  try {\n    return iconv.getDecoder(encoding)\n  } catch (e) {\n    // error getting decoder\n    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e\n\n    // the encoding was not found\n    throw createError(415, 'specified encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n}\n\n/**\n * Get the raw body of a stream (typically HTTP).\n *\n * @param {object} stream\n * @param {object|string|function} [options]\n * @param {function} [callback]\n * @public\n */\n\nfunction getRawBody (stream, options, callback) {\n  var done = callback\n  var opts = options || {}\n\n  if (options === true || typeof options === 'string') {\n    // short cut for encoding\n    opts = {\n      encoding: options\n    }\n  }\n\n  if (typeof options === 'function') {\n    done = options\n    opts = {}\n  }\n\n  // validate callback is a function, if provided\n  if (done !== undefined && typeof done !== 'function') {\n    throw new TypeError('argument callback must be a function')\n  }\n\n  // require the callback without promises\n  if (!done && !global.Promise) {\n    throw new TypeError('argument callback is required')\n  }\n\n  // get encoding\n  var encoding = opts.encoding !== true\n    ? opts.encoding\n    : 'utf-8'\n\n  // convert the limit to an integer\n  var limit = bytes.parse(opts.limit)\n\n  // convert the expected length to an integer\n  var length = opts.length != null && !isNaN(opts.length)\n    ? parseInt(opts.length, 10)\n    : null\n\n  if (done) {\n    // classic callback style\n    return readStream(stream, encoding, length, limit, done)\n  }\n\n  return new Promise(function executor (resolve, reject) {\n    readStream(stream, encoding, length, limit, function onRead (err, buf) {\n      if (err) return reject(err)\n      resolve(buf)\n    })\n  })\n}\n\n/**\n * Halt a stream.\n *\n * @param {Object} stream\n * @private\n */\n\nfunction halt (stream) {\n  // unpipe everything from the stream\n  unpipe(stream)\n\n  // pause stream\n  if (typeof stream.pause === 'function') {\n    stream.pause()\n  }\n}\n\n/**\n * Read the data from the stream.\n *\n * @param {object} stream\n * @param {string} encoding\n * @param {number} length\n * @param {number} limit\n * @param {function} callback\n * @public\n */\n\nfunction readStream (stream, encoding, length, limit, callback) {\n  var complete = false\n  var sync = true\n\n  // check the length and limit options.\n  // note: we intentionally leave the stream paused,\n  // so users should handle the stream themselves.\n  if (limit !== null && length !== null && length > limit) {\n    return done(createError(413, 'request entity too large', {\n      expected: length,\n      length: length,\n      limit: limit,\n      type: 'entity.too.large'\n    }))\n  }\n\n  // streams1: assert request encoding is buffer.\n  // streams2+: assert the stream encoding is buffer.\n  //   stream._decoder: streams1\n  //   state.encoding: streams2\n  //   state.decoder: streams2, specifically < 0.10.6\n  var state = stream._readableState\n  if (stream._decoder || (state && (state.encoding || state.decoder))) {\n    // developer error\n    return done(createError(500, 'stream encoding should not be set', {\n      type: 'stream.encoding.set'\n    }))\n  }\n\n  var received = 0\n  var decoder\n\n  try {\n    decoder = getDecoder(encoding)\n  } catch (err) {\n    return done(err)\n  }\n\n  var buffer = decoder\n    ? ''\n    : []\n\n  // attach listeners\n  stream.on('aborted', onAborted)\n  stream.on('close', cleanup)\n  stream.on('data', onData)\n  stream.on('end', onEnd)\n  stream.on('error', onEnd)\n\n  // mark sync section complete\n  sync = false\n\n  function done () {\n    var args = new Array(arguments.length)\n\n    // copy arguments\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n\n    // mark complete\n    complete = true\n\n    if (sync) {\n      process.nextTick(invokeCallback)\n    } else {\n      invokeCallback()\n    }\n\n    function invokeCallback () {\n      cleanup()\n\n      if (args[0]) {\n        // halt the stream on error\n        halt(stream)\n      }\n\n      callback.apply(null, args)\n    }\n  }\n\n  function onAborted () {\n    if (complete) return\n\n    done(createError(400, 'request aborted', {\n      code: 'ECONNABORTED',\n      expected: length,\n      length: length,\n      received: received,\n      type: 'request.aborted'\n    }))\n  }\n\n  function onData (chunk) {\n    if (complete) return\n\n    received += chunk.length\n\n    if (limit !== null && received > limit) {\n      done(createError(413, 'request entity too large', {\n        limit: limit,\n        received: received,\n        type: 'entity.too.large'\n      }))\n    } else if (decoder) {\n      buffer += decoder.write(chunk)\n    } else {\n      buffer.push(chunk)\n    }\n  }\n\n  function onEnd (err) {\n    if (complete) return\n    if (err) return done(err)\n\n    if (length !== null && received !== length) {\n      done(createError(400, 'request size did not match content length', {\n        expected: length,\n        length: length,\n        received: received,\n        type: 'request.size.invalid'\n      }))\n    } else {\n      var string = decoder\n        ? buffer + (decoder.end() || '')\n        : Buffer.concat(buffer)\n      done(null, string)\n    }\n  }\n\n  function cleanup () {\n    buffer = null\n\n    stream.removeListener('aborted', onAborted)\n    stream.removeListener('data', onData)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onEnd)\n    stream.removeListener('close', cleanup)\n  }\n}\n","/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\n        : s\n    }).join('.');\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n","/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n","'use strict'\n/* eslint no-proto: 0 */\nmodule.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties)\n\nfunction setProtoOf (obj, proto) {\n  obj.__proto__ = proto\n  return obj\n}\n\nfunction mixinProperties (obj, proto) {\n  for (var prop in proto) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      obj[prop] = proto[prop]\n    }\n  }\n  return obj\n}\n","/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.STATUS_CODES = codes\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n","/*!\n * toidentifier\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = toIdentifier\n\n/**\n * Trasform the given string into a JavaScript identifier\n *\n * @param {string} str\n * @returns {string}\n * @public\n */\n\nfunction toIdentifier (str) {\n  return str\n    .split(' ')\n    .map(function (token) {\n      return token.slice(0, 1).toUpperCase() + token.slice(1)\n    })\n    .join('')\n    .replace(/[^ _0-9a-z]/gi, '')\n}\n","/*!\n * unpipe\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = unpipe\n\n/**\n * Determine if there are Node.js pipe-like data listeners.\n * @private\n */\n\nfunction hasPipeDataListeners(stream) {\n  var listeners = stream.listeners('data')\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].name === 'ondata') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Unpipe a stream from all destinations.\n *\n * @param {object} stream\n * @public\n */\n\nfunction unpipe(stream) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  if (typeof stream.unpipe === 'function') {\n    // new-style\n    stream.unpipe()\n    return\n  }\n\n  // Node.js 0.8 hack\n  if (!hasPipeDataListeners(stream)) {\n    return\n  }\n\n  var listener\n  var listeners = stream.listeners('close')\n\n  for (var i = 0; i < listeners.length; i++) {\n    listener = listeners[i]\n\n    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {\n      continue\n    }\n\n    // invoke the listener\n    listener.call(stream)\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.json = exports.text = exports.buffer = void 0;\nconst content_type_1 = __importDefault(require(\"content-type\"));\nconst raw_body_1 = __importDefault(require(\"raw-body\"));\nconst errors_1 = require(\"./errors\");\nconst rawBodyMap = new WeakMap();\nasync function buffer(req, { limit = '1mb' } = { limit: '1mb' }) {\n    const length = req.headers['content-length'];\n    const body = rawBodyMap.get(req);\n    if (body) {\n        return body;\n    }\n    try {\n        const buf = await (0, raw_body_1.default)(req, { limit, length });\n        rawBodyMap.set(req, buf);\n        return buf;\n    }\n    catch (err) {\n        throw new errors_1.MicriBodyError(err, limit);\n    }\n}\nexports.buffer = buffer;\nasync function text(req, { limit = '1mb', encoding } = { limit: '1mb' }) {\n    const type = req.headers['content-type'] || 'text/plain';\n    const length = req.headers['content-length'];\n    const body = rawBodyMap.get(req);\n    if (body) {\n        return body;\n    }\n    if (encoding === undefined) {\n        encoding = content_type_1.default.parse(type).parameters.charset;\n    }\n    try {\n        const buf = await (0, raw_body_1.default)(req, { limit, length, encoding });\n        rawBodyMap.set(req, buf);\n        return buf.toString();\n    }\n    catch (err) {\n        throw new errors_1.MicriBodyError(err, limit);\n    }\n}\nexports.text = text;\nfunction parseJSON(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (err) {\n        throw new errors_1.MicriError(400, 'invalid_json', 'Invalid JSON', err);\n    }\n}\nfunction json(req, opts) {\n    return text(req, opts).then((body) => parseJSON(body));\n}\nexports.json = json;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvYm9keS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxnRUFBdUM7QUFDdkMsd0RBQWtDO0FBSWxDLHFDQUFzRDtBQUl0RCxNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBRTFCLEtBQUssVUFBVSxNQUFNLENBQzNCLEdBQW9CLEVBQ3BCLEVBQUUsS0FBSyxHQUFHLEtBQUssS0FBbUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBRWxELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUU3QyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksSUFBSSxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUM7S0FDWjtJQUVELElBQUk7UUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsa0JBQVUsRUFBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNyRCxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV6QixPQUFPLEdBQUcsQ0FBQztLQUNYO0lBQUMsT0FBTyxHQUFRLEVBQUU7UUFDbEIsTUFBTSxJQUFJLHVCQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3JDO0FBQ0YsQ0FBQztBQW5CRCx3QkFtQkM7QUFFTSxLQUFLLFVBQVUsSUFBSSxDQUN6QixHQUFvQixFQUNwQixFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsUUFBUSxLQUFtQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7SUFFNUQsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxZQUFZLENBQUM7SUFDekQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTdDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxJQUFJLEVBQUU7UUFDVCxPQUFPLElBQUksQ0FBQztLQUNaO0lBR0QsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzNCLFFBQVEsR0FBRyxzQkFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0tBQ3REO0lBRUQsSUFBSTtRQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMvRCxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUd6QixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUN0QjtJQUFDLE9BQU8sR0FBUSxFQUFFO1FBQ2xCLE1BQU0sSUFBSSx1QkFBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNyQztBQUNGLENBQUM7QUExQkQsb0JBMEJDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBVztJQUM3QixJQUFJO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCO0lBQUMsT0FBTyxHQUFRLEVBQUU7UUFDbEIsTUFBTSxJQUFJLG1CQUFVLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDL0Q7QUFDRixDQUFDO0FBRUQsU0FBZ0IsSUFBSSxDQUFDLEdBQW9CLEVBQUUsSUFBbUI7SUFDN0QsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUZELG9CQUVDIn0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MicriBodyError = exports.MicriError = void 0;\nconst bytes_1 = __importDefault(require(\"bytes\"));\nclass MicriError extends Error {\n    constructor(statusCode, code, message, originalError) {\n        super(message);\n        this.statusCode = statusCode;\n        this.code = code;\n        this.originalError = originalError || null;\n    }\n}\nexports.MicriError = MicriError;\nclass MicriBodyError extends MicriError {\n    constructor(err, limit) {\n        let statusCode = 400;\n        let code = 'invalid_body';\n        let message = 'Invalid body';\n        if (err.type === 'entity.too.large') {\n            statusCode = 413;\n            code = 'request_entity_too_large';\n            message = `Body exceeded ${typeof limit === 'string' ? limit : (0, bytes_1.default)(limit)} limit`;\n        }\n        super(statusCode, code, message, err);\n    }\n}\nexports.MicriBodyError = MicriBodyError;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGtEQUEwQjtBQUcxQixNQUFhLFVBQVcsU0FBUSxLQUFLO0lBS3BDLFlBQVksVUFBa0IsRUFBRSxJQUFZLEVBQUUsT0FBZSxFQUFFLGFBQXFCO1FBQ25GLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVmLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxJQUFJLElBQUksQ0FBQztJQUM1QyxDQUFDO0NBQ0Q7QUFaRCxnQ0FZQztBQUVELE1BQWEsY0FBZSxTQUFRLFVBQVU7SUFDN0MsWUFBWSxHQUFpQixFQUFFLEtBQXNCO1FBQ3BELElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUNyQixJQUFJLElBQUksR0FBRyxjQUFjLENBQUM7UUFDMUIsSUFBSSxPQUFPLEdBQUcsY0FBYyxDQUFDO1FBRTdCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxrQkFBa0IsRUFBRTtZQUNwQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ2pCLElBQUksR0FBRywwQkFBMEIsQ0FBQztZQUNsQyxPQUFPLEdBQUcsaUJBQWlCLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFBLGVBQUssRUFBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1NBQ3BGO1FBRUQsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRDtBQWRELHdDQWNDIn0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MicriError = exports.withWorker = exports.Router = void 0;\nconst serve_1 = require(\"./serve\");\nconst Router = __importStar(require(\"./router\"));\nexports.Router = Router;\nconst with_worker_1 = __importDefault(require(\"./with-worker\"));\nexports.withWorker = with_worker_1.default;\nexports.default = serve_1.serve;\n__exportStar(require(\"./body\"), exports);\n__exportStar(require(\"./serve\"), exports);\n__exportStar(require(\"./types\"), exports);\nvar errors_1 = require(\"./errors\");\nObject.defineProperty(exports, \"MicriError\", { enumerable: true, get: function () { return errors_1.MicriError; } });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLG1DQUFnQztBQUNoQyxpREFBbUM7QUFPMUIsd0JBQU07QUFOZixnRUFBdUM7QUFPOUIscUJBUEYscUJBQVUsQ0FPRTtBQUxuQixrQkFBZSxhQUFLLENBQUM7QUFDckIseUNBQXVCO0FBQ3ZCLDBDQUF3QjtBQUN4QiwwQ0FBd0I7QUFHeEIsbUNBQXNDO0FBQTdCLG9HQUFBLFVBQVUsT0FBQSJ9","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.everyPredicate = exports.otherwise = exports.on = exports.router = void 0;\nconst http_1 = require(\"http\");\nconst router = (...rest) => (req, res, opts) => (rest.find((route) => route[0](req, res, opts)) || [\n    null,\n    () => {\n        throw Error('No matching route was found');\n    },\n])[1](req, res, opts);\nexports.router = router;\nconst onInit = {};\nconst on = http_1.METHODS.map((method) => [\n    method.toLowerCase(),\n    (pred, fn) => [\n        (req, res, opts) => req.method === method && pred(req, res, opts),\n        fn,\n    ],\n]).reduce((acc, curr) => ({ ...acc, ...{ [curr[0]]: curr[1] } }), onInit);\nexports.on = on;\nconst otherwise = (fn) => [\n    () => true,\n    fn,\n];\nexports.otherwise = otherwise;\nfunction everyPredicate(...t) {\n    return (req, res, opts) => t.every((f) => f(req, res, opts));\n}\nexports.everyPredicate = everyPredicate;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvcm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtCQUErQjtBQVcvQixNQUFNLE1BQU0sR0FBRyxDQUFpQixHQUFHLElBQXFELEVBQTBCLEVBQUUsQ0FBQyxDQUNwSCxHQUFvQixFQUNwQixHQUFtQixFQUNuQixJQUFlLEVBQ1QsRUFBRSxDQUNSLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSTtJQUNsRCxJQUFJO0lBQ0osR0FBUyxFQUFFO1FBQ1YsTUFBTSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFvQkgsd0JBQU07QUFsQjFCLE1BQU0sTUFBTSxHQUF5QyxFQUFFLENBQUM7QUFDeEQsTUFBTSxFQUFFLEdBQUcsY0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLFdBQVcsRUFBRTtJQUNwQixDQUFDLElBQW9CLEVBQUUsRUFBcUIsRUFBdUMsRUFBRSxDQUFDO1FBQ3JGLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQztRQUMxRSxFQUFFO0tBQ0Y7Q0FDRCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBeUMsRUFBRSxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFXekYsZ0JBQUU7QUFWOUIsTUFBTSxTQUFTLEdBQUcsQ0FBaUIsRUFBMEIsRUFBaUQsRUFBRSxDQUFDO0lBQ2hILEdBQVksRUFBRSxDQUFDLElBQUk7SUFDbkIsRUFBRTtDQUNGLENBQUM7QUFPOEIsOEJBQVM7QUFMekMsU0FBUyxjQUFjLENBQWlCLEdBQUcsQ0FBd0I7SUFDbEUsT0FBTyxDQUFDLEdBQW9CLEVBQUUsR0FBbUIsRUFBRSxJQUFlLEVBQVcsRUFBRSxDQUM5RSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFMEMsd0NBQWMifQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serve = exports.run = exports.sendError = exports.send = void 0;\nconst http_1 = require(\"http\");\nconst content_type_1 = __importDefault(require(\"content-type\"));\nconst errors_1 = require(\"./errors\");\nconst { NODE_ENV } = process.env;\nconst DEV = NODE_ENV === 'development';\nconst jsonStringify = DEV\n    ? (obj) => JSON.stringify(obj, null, 2)\n    : (obj) => JSON.stringify(obj);\nconst isStream = (data) => !!data && typeof data.pipe === 'function';\nfunction send(res, statusCode, obj = null) {\n    res.statusCode = statusCode;\n    if (obj === null) {\n        res.end();\n        return;\n    }\n    if (Buffer.isBuffer(obj)) {\n        if (!res.getHeader('Content-Type')) {\n            res.setHeader('Content-Type', 'application/octet-stream');\n        }\n        res.setHeader('Content-Length', obj.length);\n        res.end(obj);\n        return;\n    }\n    if (isStream(obj)) {\n        if (!res.getHeader('Content-Type')) {\n            res.setHeader('Content-Type', 'application/octet-stream');\n        }\n        obj.pipe(res);\n        return;\n    }\n    let str = obj;\n    const typeObj = typeof obj;\n    if (typeObj === 'object' || typeObj === 'number' || typeObj === 'boolean') {\n        str = jsonStringify(obj);\n        if (!res.getHeader('Content-Type')) {\n            res.setHeader('Content-Type', 'application/json; charset=utf-8');\n        }\n    }\n    else {\n        if (!res.getHeader('Content-Type')) {\n            res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n        }\n    }\n    res.setHeader('Content-Length', Buffer.byteLength(str));\n    res.end(str);\n}\nexports.send = send;\nfunction isAcceptJson(headers) {\n    const { accept } = headers;\n    let type = '*/*';\n    try {\n        const ct = content_type_1.default.parse(accept || type);\n        type = ct.type || '*/*';\n    }\n    catch (err) {\n    }\n    return type === '*/*' || accept === 'application/json';\n}\nconst sendError = (req, res, errorObj) => {\n    const acceptJson = isAcceptJson(req.headers);\n    let statusCode = 500;\n    let body = acceptJson\n        ? {\n            error: {\n                code: 'internal_server_error',\n                message: 'Internal Server Error',\n            },\n        }\n        : 'Internal Server Error';\n    if (errorObj instanceof errors_1.MicriError) {\n        statusCode = errorObj.statusCode || 500;\n        const code = errorObj.code || 'internal_server_error';\n        if (acceptJson) {\n            if (DEV) {\n                body = {\n                    error: {\n                        code,\n                        message: errorObj.message,\n                        stack: errorObj.stack,\n                        originalError: errorObj.originalError || null,\n                    },\n                };\n            }\n            else {\n                const message = errorObj.message || 'Internal Server Error';\n                body = {\n                    error: {\n                        code,\n                        message,\n                    },\n                };\n            }\n        }\n        else {\n            const message = errorObj.message || 'Internal Server Error';\n            body = DEV ? errorObj.stack : message;\n        }\n    }\n    else if (errorObj instanceof Error) {\n        console.error(errorObj);\n    }\n    else {\n        console.warn('thrown error must be an instance Error');\n    }\n    send(res, statusCode, body);\n};\nexports.sendError = sendError;\nfunction run(req, res, fn) {\n    return new Promise((resolve) => resolve(fn(req, res)))\n        .then((val) => {\n        if (val === null) {\n            send(res, 204, null);\n            return;\n        }\n        if (val !== undefined) {\n            send(res, res.statusCode || 200, val);\n        }\n    })\n        .catch((err) => (0, exports.sendError)(req, res, err));\n}\nexports.run = run;\nconst serve = (fn) => (0, http_1.createServer)((req, res) => run(req, res, fn));\nexports.serve = serve;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvc2VydmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsK0JBQWtHO0FBR2xHLGdFQUF1QztBQUl2QyxxQ0FBc0M7QUFFdEMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFDakMsTUFBTSxHQUFHLEdBQUcsUUFBUSxLQUFLLGFBQWEsQ0FBQztBQUN2QyxNQUFNLGFBQWEsR0FBRyxHQUFHO0lBQ3hCLENBQUMsQ0FBQyxDQUFDLEdBQVEsRUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQyxHQUFRLEVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFN0MsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUUxRSxTQUFnQixJQUFJLENBQUMsR0FBbUIsRUFBRSxVQUFrQixFQUFFLE1BQVcsSUFBSTtJQUM1RSxHQUFHLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUU1QixJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDakIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1YsT0FBTztLQUNQO0lBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ25DLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLDBCQUEwQixDQUFDLENBQUM7U0FDMUQ7UUFFRCxHQUFHLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsT0FBTztLQUNQO0lBRUQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDbkMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztTQUMxRDtRQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPO0tBQ1A7SUFFRCxJQUFJLEdBQUcsR0FBVyxHQUFHLENBQUM7SUFDdEIsTUFBTSxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUM7SUFFM0IsSUFBSSxPQUFPLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUkxRSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ25DLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLGlDQUFpQyxDQUFDLENBQUM7U0FDakU7S0FDRDtTQUFNO1FBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDbkMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztTQUMzRDtLQUNEO0lBRUQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLENBQUM7QUEvQ0Qsb0JBK0NDO0FBRUQsU0FBUyxZQUFZLENBQUMsT0FBNEI7SUFDakQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUMzQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7SUFFakIsSUFBSTtRQUNILE1BQU0sRUFBRSxHQUFHLHNCQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUM7S0FDeEI7SUFBQyxPQUFPLEdBQUcsRUFBRTtLQUViO0lBRUQsT0FBTyxJQUFJLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSyxrQkFBa0IsQ0FBQztBQUN4RCxDQUFDO0FBRU0sTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFvQixFQUFFLEdBQW1CLEVBQUUsUUFBNEIsRUFBRSxFQUFFO0lBQ3BHLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLElBQUksSUFBSSxHQUFRLFVBQVU7UUFDekIsQ0FBQyxDQUFDO1lBQ0EsS0FBSyxFQUFFO2dCQUNOLElBQUksRUFBRSx1QkFBdUI7Z0JBQzdCLE9BQU8sRUFBRSx1QkFBdUI7YUFDaEM7U0FDQTtRQUNILENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztJQUUzQixJQUFJLFFBQVEsWUFBWSxtQkFBVSxFQUFFO1FBQ25DLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxJQUFJLHVCQUF1QixDQUFDO1FBRXRELElBQUksVUFBVSxFQUFFO1lBQ2YsSUFBSSxHQUFHLEVBQUU7Z0JBQ1IsSUFBSSxHQUFHO29CQUNOLEtBQUssRUFBRTt3QkFDTixJQUFJO3dCQUNKLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTzt3QkFDekIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO3dCQUNyQixhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWEsSUFBSSxJQUFJO3FCQUM3QztpQkFDRCxDQUFDO2FBQ0Y7aUJBQU07Z0JBQ04sTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQztnQkFFNUQsSUFBSSxHQUFHO29CQUNOLEtBQUssRUFBRTt3QkFDTixJQUFJO3dCQUNKLE9BQU87cUJBQ1A7aUJBQ0QsQ0FBQzthQUNGO1NBQ0Q7YUFBTTtZQUNOLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLElBQUksdUJBQXVCLENBQUM7WUFFNUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ3RDO0tBQ0Q7U0FBTSxJQUFJLFFBQVEsWUFBWSxLQUFLLEVBQUU7UUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN4QjtTQUFNO1FBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0IsQ0FBQyxDQUFDO0FBaERXLFFBQUEsU0FBUyxhQWdEcEI7QUFFRixTQUFnQixHQUFHLENBQWlCLEdBQW9CLEVBQUUsR0FBbUIsRUFBRSxFQUEwQjtJQUN4RyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3BELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ2IsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE9BQU87U0FDUDtRQUtELElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUN0QixJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0YsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFoQkQsa0JBZ0JDO0FBRU0sTUFBTSxLQUFLLEdBQUcsQ0FBaUIsRUFBMEIsRUFBVSxFQUFFLENBQzNFLElBQUEsbUJBQVksRUFBQyxDQUFDLEdBQW9CLEVBQUUsR0FBbUIsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFXLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUQ3RSxRQUFBLEtBQUssU0FDd0UifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = exports.ServerResponse = exports.IncomingMessage = void 0;\nconst http_1 = require(\"http\");\nObject.defineProperty(exports, \"IncomingMessage\", { enumerable: true, get: function () { return http_1.IncomingMessage; } });\nObject.defineProperty(exports, \"ServerResponse\", { enumerable: true, get: function () { return http_1.ServerResponse; } });\nObject.defineProperty(exports, \"Server\", { enumerable: true, get: function () { return http_1.Server; } });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQW9GO0FBRzNFLGdHQUhBLHNCQUFlLE9BR0E7QUFBRSwrRkFIQSxxQkFBYyxPQUdBO0FBQXVCLHVGQUhBLGFBQU0sT0FHQSJ9","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = __importDefault(require(\"path\"));\nconst body_1 = require(\"./body\");\nconst worker_threads_1 = require(\"worker_threads\");\nfunction withWorker(handlerPath, workerOpts) {\n    if (!worker_threads_1.isMainThread) {\n        throw new Error('withWorker() can be only used in the main thread');\n    }\n    const trampoline = (workerOpts === null || workerOpts === void 0 ? void 0 : workerOpts.eval)\n        ? `require('${path_1.default.join(__dirname, './worker-wrapper')}')(${handlerPath})`\n        : `const p=require('${handlerPath}'); require('${path_1.default.join(__dirname, './worker-wrapper')}')(p.default || p)`;\n    return async (req, res, opts) => {\n        var _a;\n        const body = await (0, body_1.buffer)(req, { limit: (_a = workerOpts === null || workerOpts === void 0 ? void 0 : workerOpts.limit) !== null && _a !== void 0 ? _a : undefined });\n        return new Promise((resolve, reject) => {\n            const worker = new worker_threads_1.Worker(trampoline, {\n                env: (workerOpts === null || workerOpts === void 0 ? void 0 : workerOpts.env) || worker_threads_1.SHARE_ENV,\n                eval: true,\n                workerData: {\n                    req: {\n                        method: req.method,\n                        url: req.url,\n                        headers: req.headers,\n                    },\n                    opts,\n                },\n            });\n            let writeFn = (msg) => {\n                res.writeHead(msg.statusCode, msg.headers);\n                if (msg.statusMessage) {\n                    res.statusMessage = msg.statusMessage;\n                }\n                writeFn = (msg) => {\n                    res.write(Buffer.from(msg));\n                };\n            };\n            worker.on('message', (chunk) => {\n                writeFn(chunk);\n            });\n            worker.on('error', reject);\n            worker.on('exit', (code) => {\n                if (code !== 0) {\n                    reject(new Error(`Worker stopped with exit code ${code}`));\n                }\n                else {\n                    res.end();\n                    resolve();\n                }\n            });\n            worker.postMessage(body);\n        });\n    };\n}\nexports.default = withWorker;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL2hicC9yZXBvcy9taWNyaS9zcmMvd2l0aC13b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsaUNBQWdDO0FBQ2hDLG1EQU13QjtBQVV4QixTQUF3QixVQUFVLENBQ2pDLFdBQW1CLEVBQ25CLFVBSUM7SUFFRCxJQUFJLENBQUMsNkJBQVksRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7S0FDcEU7SUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxJQUFJO1FBQ2xDLENBQUMsQ0FBQyxZQUFZLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sV0FBVyxHQUFHO1FBQzFFLENBQUMsQ0FBQyxvQkFBb0IsV0FBVyxnQkFBZ0IsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsb0JBQW9CLENBQUM7SUFFL0csT0FBTyxLQUFLLEVBQUUsR0FBb0IsRUFBRSxHQUFtQixFQUFFLElBQWMsRUFBRSxFQUFFOztRQUMxRSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsYUFBTSxFQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxLQUFLLG1DQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFFMUUsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM1QyxNQUFNLE1BQU0sR0FBRyxJQUFJLHVCQUFNLENBQUMsVUFBVSxFQUFFO2dCQUdyQyxHQUFHLEVBQUUsQ0FBQSxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsR0FBRyxLQUFJLDBCQUFTO2dCQUNqQyxJQUFJLEVBQUUsSUFBSTtnQkFDVixVQUFVLEVBQUU7b0JBQ1gsR0FBRyxFQUFFO3dCQUNKLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTt3QkFDbEIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO3dCQUNaLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztxQkFFcEI7b0JBQ0QsSUFBSTtpQkFDSjthQUNELENBQUMsQ0FBQztZQUNILElBQUksT0FBTyxHQUFHLENBQUMsR0FBeUIsRUFBRSxFQUFFO2dCQUMzQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLEdBQUcsQ0FBQyxhQUFhLEVBQUU7b0JBQ3RCLEdBQUcsQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztpQkFDdEM7Z0JBSUQsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ2pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixDQUFDLENBQUM7WUFDSCxDQUFDLENBQUM7WUFDRixNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUNsQyxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7b0JBQ2YsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGlDQUFpQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzNEO3FCQUFNO29CQUNOLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDVixPQUFPLEVBQUUsQ0FBQztpQkFDVjtZQUNGLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNILENBQUM7QUE5REQsNkJBOERDIn0=","module.exports = require(\"buffer\");","module.exports = require(\"events\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"util\");","module.exports = require(\"worker_threads\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6144);\n"]}