"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateSchemaObject = void 0;
const lodash_1 = require("lodash");
const keywords_1 = require("./keywords");
const keywordsKeys = Object.keys(keywords_1.default);
function translateSchemaObject(document, schema) {
    if ('jsonSchemaDialect' in document && typeof document.jsonSchemaDialect === 'string') {
        return Object.assign({ $schema: document.jsonSchemaDialect }, schema);
    }
    const clonedSchema = convertSchema(schema, {
        structs: ['allOf', 'anyOf', 'oneOf', 'not', 'items', 'additionalProperties', 'additionalItems'],
    });
    clonedSchema.$schema = 'http://json-schema.org/draft-07/schema#';
    return clonedSchema;
}
exports.translateSchemaObject = translateSchemaObject;
function convertSchema(schema, options) {
    const clonedSchema = Object.assign({}, schema);
    for (const struct of options.structs) {
        if (Array.isArray(clonedSchema[struct])) {
            clonedSchema[struct] = clonedSchema[struct].slice();
            for (let i = 0; i < clonedSchema[struct].length; i++) {
                if (lodash_1.isObject(clonedSchema[struct][i])) {
                    clonedSchema[struct][i] = convertSchema(clonedSchema[struct][i], options);
                }
                else {
                    clonedSchema[struct].splice(i, 1);
                    i--;
                }
            }
        }
        else if (clonedSchema[struct] !== null && typeof clonedSchema[struct] === 'object') {
            clonedSchema[struct] = convertSchema(clonedSchema[struct], options);
        }
    }
    if ('properties' in clonedSchema && lodash_1.isObject(clonedSchema.properties)) {
        convertProperties(clonedSchema, options);
    }
    for (const keyword of keywordsKeys) {
        if (keyword in schema) {
            keywords_1.default[keyword](clonedSchema);
        }
    }
    return clonedSchema;
}
function convertProperties(schema, options) {
    const props = Object.assign({}, schema.properties);
    schema.properties = props;
    for (const key of Object.keys(props)) {
        const property = props[key];
        if (lodash_1.isObject(property)) {
            props[key] = convertSchema(property, options);
        }
    }
}
//# sourceMappingURL=index.js.map