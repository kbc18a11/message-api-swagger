"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateToRequest = exports.translateParameterObject = void 0;
const lodash_1 = require("lodash");
const schema_1 = require("../../oas/transformers/schema");
const utils_1 = require("../../utils");
const guards_1 = require("../guards");
const content_1 = require("./content");
function translateRequestBody(document, requestBodyObject) {
    return {
        required: requestBodyObject.required,
        description: requestBodyObject.description,
        contents: lodash_1.compact(lodash_1.map(requestBodyObject.content, lodash_1.partial(content_1.translateMediaTypeObject, document))),
    };
}
function translateParameterObject(document, parameterObject) {
    const examples = lodash_1.map(parameterObject.examples, (example, key) => (Object.assign({ key }, example)));
    const hasDefaultExample = examples.map(({ key }) => key).includes('default');
    return lodash_1.pickBy(Object.assign(Object.assign({}, lodash_1.omit(parameterObject, 'in', 'schema', 'example')), { name: parameterObject.name, style: parameterObject.style, schema: utils_1.isDictionary(parameterObject.schema)
            ? schema_1.translateSchemaObject(document, Object.assign(Object.assign({}, parameterObject.schema), ('example' in parameterObject ? { example: parameterObject.example } : null)))
            : void 0, examples: 'example' in parameterObject && !hasDefaultExample
            ? [{ key: 'default', value: parameterObject.example }, ...examples]
            : examples }));
}
exports.translateParameterObject = translateParameterObject;
function translateToRequest(document, parameters, requestBodyObject) {
    const params = {
        header: [],
        query: [],
        cookie: [],
        path: [],
    };
    for (const parameter of parameters) {
        const { in: key } = parameter;
        if (!params.hasOwnProperty(key))
            continue;
        params[key].push(translateParameterObject(document, parameter));
    }
    let body;
    if (utils_1.isDictionary(requestBodyObject)) {
        const resolvedRequestBodyObject = utils_1.maybeResolveLocalRef(document, requestBodyObject);
        body = guards_1.isRequestBodyObject(resolvedRequestBodyObject)
            ? translateRequestBody(document, resolvedRequestBodyObject)
            : { contents: [] };
    }
    else {
        body = { contents: [] };
    }
    return {
        body,
        headers: params.header,
        query: params.query,
        cookie: params.cookie,
        path: params.path,
    };
}
exports.translateToRequest = translateToRequest;
//# sourceMappingURL=request.js.map