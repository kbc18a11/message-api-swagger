"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateMediaTypeObject = exports.translateHeaderObject = void 0;
const types_1 = require("@stoplight/types");
const lodash_1 = require("lodash");
const schema_1 = require("../../oas/transformers/schema");
const utils_1 = require("../../utils");
const guards_1 = require("../guards");
function translateEncodingPropertyObject(encodingPropertyObject, property) {
    const acceptableStyles = [
        types_1.HttpParamStyles.Form,
        types_1.HttpParamStyles.SpaceDelimited,
        types_1.HttpParamStyles.PipeDelimited,
        types_1.HttpParamStyles.DeepObject,
    ];
    if (encodingPropertyObject.style && !acceptableStyles.includes(encodingPropertyObject.style)) {
        throw new Error(`Encoding property style: '${encodingPropertyObject.style}' is incorrect, must be one of: ${acceptableStyles}`);
    }
    return Object.assign(Object.assign({ property }, encodingPropertyObject), { style: encodingPropertyObject.style, mediaType: encodingPropertyObject.contentType, headers: lodash_1.compact(lodash_1.map(encodingPropertyObject.headers, translateHeaderObject)) });
}
function translateHeaderObject(headerObject, name) {
    var _a;
    if (!lodash_1.isObject(headerObject))
        return;
    if (!guards_1.isHeaderObject(headerObject)) {
        return {
            encodings: [],
            examples: [],
            name,
            style: types_1.HttpParamStyles.Simple,
        };
    }
    const { content: contentObject } = headerObject;
    const contentValue = lodash_1.values(contentObject)[0];
    const baseContent = Object.assign(Object.assign({}, lodash_1.omit(headerObject, 'content', 'style', 'examples', 'example', 'schema')), { name, style: (_a = headerObject === null || headerObject === void 0 ? void 0 : headerObject.style) !== null && _a !== void 0 ? _a : types_1.HttpParamStyles.Simple });
    const examples = [];
    const encodings = [];
    if (contentValue) {
        examples.push(...lodash_1.keys(contentValue.examples).map(transformExamples(contentValue)));
        encodings.push(...lodash_1.values(contentValue.encoding));
        if (contentValue.example) {
            examples.push({
                key: '__default_content',
                value: contentValue.example,
            });
        }
    }
    examples.push(...lodash_1.keys(headerObject.examples).map(transformExamples(headerObject)));
    if (headerObject.example) {
        examples.push({
            key: '__default',
            value: headerObject.example,
        });
    }
    return lodash_1.pickBy(Object.assign(Object.assign({}, baseContent), { schema: lodash_1.get(headerObject, 'schema'), encodings,
        examples }));
}
exports.translateHeaderObject = translateHeaderObject;
function translateMediaTypeObject(document, mediaObject, mediaType) {
    var _a;
    if (!utils_1.isDictionary(mediaObject))
        return;
    const resolvedMediaObject = resolveMediaObject(document, mediaObject);
    const { schema, encoding, examples } = resolvedMediaObject;
    let jsonSchema;
    if (lodash_1.isObject(schema)) {
        try {
            jsonSchema = schema_1.translateSchemaObject(document, schema);
        }
        catch (_b) {
        }
    }
    const example = resolvedMediaObject.example || ((_a = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.examples) === null || _a === void 0 ? void 0 : _a[0]);
    return {
        mediaType,
        schema: jsonSchema,
        examples: lodash_1.compact(lodash_1.union(example ? [{ key: 'default', value: example }] : undefined, utils_1.isDictionary(examples)
            ? Object.keys(examples).map(exampleKey => ({
                key: exampleKey,
                summary: lodash_1.get(examples, [exampleKey, 'summary']),
                description: lodash_1.get(examples, [exampleKey, 'description']),
                value: lodash_1.get(examples, [exampleKey, 'value']),
            }))
            : [])),
        encodings: lodash_1.map(encoding, translateEncodingPropertyObject),
    };
}
exports.translateMediaTypeObject = translateMediaTypeObject;
function resolveMediaObject(document, maybeMediaObject) {
    const mediaObject = Object.assign({}, maybeMediaObject);
    if (utils_1.isDictionary(mediaObject.schema)) {
        mediaObject.schema = utils_1.maybeResolveLocalRef(document, mediaObject.schema);
    }
    if (utils_1.isDictionary(mediaObject.examples)) {
        const examples = Object.assign({}, mediaObject.examples);
        mediaObject.examples = examples;
        lodash_1.each(examples, (exampleValue, exampleName) => {
            examples[exampleName] = utils_1.maybeResolveLocalRef(document, exampleValue);
        });
    }
    return mediaObject;
}
const transformExamples = (source) => (key) => {
    return {
        summary: lodash_1.get(source, ['examples', key, 'summary']),
        description: lodash_1.get(source, ['examples', key, 'description']),
        value: lodash_1.get(source, ['examples', key, 'value']),
        key,
    };
};
//# sourceMappingURL=content.js.map